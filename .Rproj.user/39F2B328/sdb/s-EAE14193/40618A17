{
    "collab_server" : "",
    "contents" : "# Getting started\n\nIn this section we'll walk through the steps of building a simple shiny application.\n\n## Structure of a Shiny App\n\nA simple shiny app is a directory containing two `R` scripts, one is `ui.R`, which controls the layout and appearance of your app, the other is `server.R`, which contains the instructions that your computer needs to build your app. Note that the names for the scripts are fixed, you should **NOT** use other names.\n\n**Exercise 1: App template**\n\nLet's create a new directory named `01-hello` (or whatever you like) and then create two empty `ui.R` and `server.R` files within it.\n\nOpen `ui.R` with any editor you want and put the following code in it:\n\n```{r, eval=FALSE}\nlibrary(shiny)\nfluidPage()\n```\n\nThen copy the following code to `server.R`. Note that the `server.R` contains one single unnamed function.\n\n```{r, eval=FALSE}\nlibrary(shiny)\nfunction(input, output) {\n}\n```\n\n```{block, note, type='rmdnote'}\nFor historical reasons, usually `shinyUI` and `shinyServer` functions are used to wrap the UI and server side scripts, but it is no longer required as of Shiny 0.10.\n```\n\nTo run the app, \n\n1. you can switch the R working directory to the directory above `01-hello` and run\n\n```{r, eval=FALSE}\nlibrary(shiny)\nrunApp('01-hello')\n```\n\n2. or you can switch the R working directory to `01-hello` and run \n\n```{r, eval=FALSE}\nlibrary(shiny)\nrunApp()\n```\n\n3. just click the `Run App` button if you use `Rstudio` (**Recommended**)\n\nAfter running the app, you'll get an empty web page.\n\n\n**Single-file Shiny App**\n\nAs the name implied, a single-file shiny app consists of a single file called `app.R` which contains both the server and UI components. As an example, we can rewrite *Exercise 1* into a single-file shiny app with the following code in the `app.R` file:\n\n```{r, eval=FALSE}\nlibrary(shiny)\nui <- fluidPage()\nserver <- function(input, output){}\nshinyApp(ui = ui, server = server)\n```\n\n## UI\n\nUI is de facto an HTML file.\n\nIn building `ui.R` file, what we really do is to construct an HTML file with R functions. To see so by typing `fluidPage()` in the R console and you'll see this function returns an HTML div tag `<div class=\"container-fluid\"></div>`.\nSo of course you can [build your entire UI with HTML](http://shiny.rstudio.com/articles/html-ui.html).\n\nBy default, Shiny uses [bootstrap](http://getbootstrap.com/)(has nothing to do with `bootstrap` method in statistics), the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web.\n\n### HTML tags\n\n> shiny::tags is a list of 110 functions. Each function builds a specific HTML tag. If you are familiar with HTML, you will recognize these tags by their names.\n\nYou can build UI by using HTML tags. Use `names(tags)` to see all available tags. For more information please look at [Customize your UI with HTML](http://shiny.rstudio.com/articles/html-tags.html).\n\n**Exercise 2: adding HTML tags**\n\nModify `ui.R` in `01-hello` folder as follows and run the App again:\n\n```{r, eval=FALSE}\nlibrary(shiny)\nfluidPage(\n  tags$div(\n    h1(\"Hello Shiny!\"),\n    hr(),\n    p(strong(\"bold font \"), em(\"italic font\")),\n    p(code(\"code block\")),\n    a(href=\"http://www.google.com\", \"link to Google\"),\n    HTML('<p>\n         <label>A numeric input:</label><br /> \n         <input type=\"number\" name=\"n\" value=\"7\" min=\"1\" max=\"30\" />\n         </p>')\n    )\n  )\n```\n\nNote that most commonly used tags (like `h1`, `p`, `a`, etc in example above) have wrapper functions, so you do not need to prefix their names with `tags$`.\n\n### Layout\n\nShiny implemented the layout features availabe in Bootstrap. You can speed up your development by choosing appropriate layout style.\n\n**Panels**\n\nPanel functions are used to put a group of elements together into a single 'panel'.\n\nThere are several `panel` functions defined in `shiny`:\n\n    absolutePanel()\n    conditionalPanel()\n    fixedPanel()\n    headerPanel()\n    inputPanel()\n    mainPanel()\n    navlistPanel()\n    sidebarPanel()\n    tabPanel()\n    tabsetPanel()\n    titlePanel()\n    wellPanel()\n\nMost of the `panel` functions return `div` tags with some class attributes defined in Bootstrap. For example, if you type `wellPanel` in the R console, you'll get `<div class=\"well\"></div>`, which is the [`well`](http://www.w3schools.com/bootstrap/bootstrap_wells.asp) class in Bootstrap.\n\n**Layouts**\n\nLayout functions are used to organize panels and elements into an existing layout.\n\nThere are several `layout` functions defined in `shiny`:\n\n- `fluidRow()`, `column()`: based on the bootstrap [grid system] (http://v4-alpha.getbootstrap.com/layout/grid/).  See `?fluidRow` for more details.\n- `flowLayout()`: Lays out elements in a left-to-right, top-to-bottom arrangement.\n- `sidebarLayout()`: Create a layout with a sidebar and main area. (Most commonly used layout.)\n- `splitLayout()`: Lays out elements horizontally, dividing the available horizontal space into equal parts (by default).\n- `verticalLayout()`: Create a container that includes one or more rows of content.\n\nFigure \\@ref(layout) gives a graphical demenstration.\n\n```{r layout, fig.cap='Shiny UI layouts', echo=FALSE}\nknitr::include_graphics('images/layout.png')\n```\n\nFor more details please look at [Application layout guide](http://shiny.rstudio.com/articles/layout-guide.html)\n\n------\n\n`sidebarLayout` is perhaps the most useful layout. We'll take it as example here to show the usage of UI layout functions.\n\nSee the help document of the `sidebarLayout` function for detail: `?sidebarLayout`\n\n**Exercise 3: sidebarLayout**\n\nModify `ui.R` in `01-hello` folder as follows and run the App again:\n\n```{r, eval=FALSE}\nlibrary(shiny)\nfluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(HTML('<p>\n         <label>A numeric input:</label><br /> \n         <input type=\"number\" name=\"n\" value=\"7\" min=\"1\" max=\"30\" />\n         </p>')),\n    mainPanel(\n      p(strong(\"bold font \"), em(\"italic font\")),\n      p(code(\"code block\")),\n      a(href=\"http://www.google.com\", \"link to Google\"))\n  )\n)\n```\n\n### Inputs (control widgets)\n\nWigets are web elements that users can interact with. Widgets provide a way for your users to send messages to the Shiny app. Shiny widgets collect values from the user. When a user changes the widget, the value will change as well.\n\nIn Exercise 3, we used HTML code to add a numeric input (a kind of 'widget') to the sidebar panel, but over using HTML code will make the code quite messy and hard to manage for large projects. Shiny comes with a family of pre-built widgets, each created with a transparently named R function, which makes the widgets easier to create and look better(using bootstrap style).\n\nThe standard Shiny widgets are:\n\n**function** |\t**widget**\n------------- | ----------------------------\nactionButton |\tAction Button\ncheckboxGroupInput |\tA group of check boxes\ncheckboxInput |\tA single check box\ndateInput |\tA calendar to aid date selection\ndateRangeInput |\tA pair of calendars for selecting a date range\nfileInput |\tA file upload control wizard\nhelpText |\tHelp text that can be added to an input form\nnumericInput |\tA field to enter numbers\nradioButtons |\tA set of radio buttons\nselectInput |\tA box with choices to select from\nsliderInput |\tA slider bar\nsubmitButton |\tA submit button\ntextInput |\tA field to enter text\n\nFigure \\@ref(widgets) gives a graphical demenstration.\n\n```{r widgets, fig.cap='Control Widgets.', echo=FALSE}\nknitr::include_graphics('images/widgets.png')\n```\n\nSee examples of widgets: <http://shiny.rstudio.com/gallery/widget-gallery.html>\n\n**Adding widgets**\n\nEach widget function requires several arguments. The first two arguments for each widget are\n\n- **A Name for the widget**. The user will not see this name, but you can use it to access the widgetâ€™s value. The name should be a character string.\n\n- **A label**. This label will appear with the widget in your app. It should be a character string, but it can be an empty string \"\".\n\nThe remaining arguments vary from widget to widget, depending on what the widget needs to do its job. \nNow let's improve our example by using `numericInput` instead of HTML code.\n\n**Exercise 4: widgets**\n\nModify `ui.R` in `01-hello` folder as follows and run the App again:\n\n```{r, eval=FALSE}\nlibrary(shiny)\nfluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"numInput\", \"A numeric input:\", value = 7, min = 1, max = 30)\n    ),\n    mainPanel(\n      p(strong(\"bold font \"), em(\"italic font\")),\n      p(code(\"code block\")),\n      a(href=\"http://www.google.com\", \"link to Google\"))\n  )\n)\n```\n\n## Server\n\n### Output\n\nNow we want to build our output, which will be updated automatically when an input widget changes.\n\nFor example, we want to build an app with a numeric input in the sidebar panel controls the 'radius' of a circle, and a text output in the main panel showing the area of the circle based on the radius input. We want the text output can be updated automatically when the radius value changes.\n\nTwo steps to do that:\n\n1. Register your output object in `ui.R`. That is tell UI **where** to put the text output (outlook). \n2. Tell Shiny how to render the output in `server.R`. That is tell the server **how** to render the text (logic).\n\n**Exercise 5: output**\n\nModify `ui.R` in `01-hello` folder as follows. It is saying that I want to put a text output object in the main panel.\n\n```{r, eval=FALSE}\nlibrary(shiny)\nfluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"numInput\", \"A numeric input:\", value = 7, min = 1, max = 30)\n    ),\n    mainPanel(\n      textOutput(\"txtOutput\")\n    )\n  )\n)\n```\n\nModify `server.R` in `01-hello` folder as follows. It gives the instruction of how to calcuate the area of a circle and what text to print. \n\n```{r, eval=FALSE}\nlibrary(shiny)\nfunction(input, output) {\n  output$txtOutput = renderText({\n    paste0(\"The area of the circle is: \", pi*input$numInput^2)\n  })\n}\n```\n\nNow let's run the app in `showcase` mode by calling `runApp(display.mode = \"showcase\")`. \n\nShow case mode will show application code and metadata from a `DESCRIPTION` file in the application directory alongside the application. Shiny showcase will highlight lines of code in `server.R` as it runs them. The highlight will appear in yellow and fade out after a few moments. This helps reveal how Shiny creates **reactivity**; when your user manipulates an app, Shiny reruns parts of `server.R` to create updated output.\n\n- The unnamed function in `server.R` plays a special role in the Shiny process. The function has two arguments, `input` and `output`, both of them are list-like objects.  The `input` stores the current values of all of the widgets in your app. These values will be saved under the names same as the `inputId` of the widgets in `ui.R`. The `output` contains all of the code needed to update the R objects in your app.\n\n- Shiny will automatically make an object **reactive** if the object uses an input value.\n\nIn the example above, we used `textOutput` to register a text output object in `ui.R` and then used `renderText` function to render it. There are many other pairs of `*Output` and `render*` functions defined in Shiny and they work together to add R output to the UI.\n\nOutput function | render function\t | creates\n----------------|------------------|------------------------------\nhtmlOutput/uiOutput | renderUI |\ta Shiny tag object or HTML\nimageOutput |\trenderImage\t| images (saved as a link to a source file)\nplotOutput | renderPlot |\tplots\ntableOutput |\trenderTable\t| data frame, matrix, other table like structures\ntextOutput | renderText |\tcharacter strings\nverbatimTextOutput | renderPrint\t| any printed output\n\nFigure \\@ref(output) gives a graphical demenstration.\n\n```{r output, fig.cap='Shiny `render*` and `*Output` functions', echo=FALSE}\nknitr::include_graphics('images/outputs.png')\n```\n\n### Summary practice\n\n**Exercise 6: A summary of what we have learned**\n\nCreate a shiny app named '02-cars' with the following requirements:\n1. Layout: sidebar layout.\n2. A slider in the sidebar panel with `inputId` \"nrows\" and `label` \"Number of rows:\", which controls how many rows of the data set `datasets::cars` to use in the following analysis. The minimum value is 1, maximum value is 50 and default value is 10.\n3. In the main panel, create a scatterplot with `x` axis `speed` and `y` axis `dist` on the top and a table showing the data on the bottom, using `outputId` \"carsPlot\" and \"carsTable\" respectively.\n\nSolution will be given in next section.\n\n```{block, tip1, type='rmdtip'}\nSome people get confused about when to use `,` and when should not use. Actually it is quite easy to remember: when your component is as an argument to a function, you should use `,`, otherwise don't use comma. For example, you put several components inside a `fluidRow`, then you should separate the components by using comma; you put some expression inside `function(input, output){}` in the `server.R` file, then you don't need comma to seperate them as they are in the body of a function.\n```\n\n\n\n",
    "created" : 1464151189375.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "484453178",
    "id" : "40618A17",
    "lastKnownWriteTime" : 1464205763,
    "last_content_update" : 1464205763708,
    "path" : "~/shinyTutorial/02-gettingStarted.Rmd",
    "project_path" : "02-gettingStarted.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}