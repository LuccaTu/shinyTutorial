[
["index.html", "Shiny Tutorial Chapter 1 Prerequisites", " Shiny Tutorial Weicheng Zhu 2016-05-25 Chapter 1 Prerequisites Some basic knowlege about the R lanuage is requred. It would be helpful if you have some basic knowlege about HTML, CSS and javascript, but they are not required. "],
["softwares.html", "1.1 Softwares", " 1.1 Softwares R. Better to use the latest version of R (3.3.0 for the time this tutorial is written). Rstudio. A user friendly IDE for R. Very convenient tool in building shiny apps. Web browser. Better to use google chrome or firefox. "],
["r-packages.html", "1.2 R packages", " 1.2 R packages shiny shinydashboard plotly -->"],
["intro.html", "Chapter 2 Introduction ", " Chapter 2 Introduction "],
["web-development.html", "2.1 Web development", " 2.1 Web development Here are some concepts that usually used in web development. Knowing them might make you look like more professional:sunglasses: Static web page A static web page (sometimes called a flat page/stationary page) is a web page that is delivered to the user exactly as stored. (from wiki) Figure 2.1: Static web page: is delivered to the user exactly as stored. Dynamic web page A server-side dynamic web page is a web page whose construction is controlled by an application server processing server-side scripts. (from wiki) Figure 2.2: Dynamic web page: example of server-side scripting (PHP and MySQL). Web application A Web application (Web app) is an application program that is stored on a remote server and delivered over the Internet through a browser interface. (from WhatIs.com) Web (application) framework A Web framework is a collection of packages or modules which allow developers to write Web applications or services without having to handle such low-level details as protocols, sockets or process/thread management. (from PythonWiki) Front-end web development Front-end web development, also known as client-side development is the practice of producing HTML, CSS and JavaScript for a website or web application so that a user can see and interact with them directly. (from Wiki) Back-end web development Back-end web development creates the logical back-end and core computational logic of a website. (from techopedia) "],
["shiny.html", "2.2 Shiny", " 2.2 Shiny Shiny is a web application framework for R that can help turn your analyses into interactive web applications. No HTML, CSS, or JavaScript knowledge required Why Shiny? Easy to learn, easy to use. The development time is minimized. Excellent tool for data visualization. Have very strong backing: the R language Fun &amp; Cool. A Shiny app usually contains two parts: UI: controls the outlook of the web page Server: (a live R session) controls the logic How does Shiny app work? The “Server” keeps monitoring the UI. Whenever there is a change in the UI, the “Server” will follow some instructions (run some R code) accordingly and update the UI’s display. (This is the basic idea of reactive expression, which is an distinguish feature of Shiny we will talk about later.) Example library(shiny) runExample(&quot;01_hello&quot;) # a histogram In the example above, the “Server” keeps monitoring the “slider” in the page, and whenever there is a change with it, the “Server” will re-execute a block of R code to regenerate the hitogram. "],
["resources.html", "2.3 Resources", " 2.3 Resources Shiny portal site: http://shiny.rstudio.com Tutorial (get started): http://shiny.rstudio.com/tutorial/ Articles (go deeper): http://shiny.rstudio.com/articles/ Gallery (get inspired): http://shiny.rstudio.com/gallery/ Shiny User Showcase: https://www.rstudio.com/products/shiny/shiny-user-showcase/ Shiny Apps for the Enterprise Industry Specific Shiny Apps Shiny Apps as Analytics Tools Shiny Apps that Extend Shiny Shiny Apps with Popular Appeal Shiny Apps for Teaching Shiny examples (over 100 examples): https://github.com/rstudio/shiny-examples Ask questions in the shiny google group: https://groups.google.com/forum/#!forum/shiny-discuss Articles from R blogger: http://www.r-bloggers.com/?s=shiny Gallery of user-made apps: http://www.showmeshiny.com/ 2016 Shiny Developer Conference Videos https://www.rstudio.com/resources/webinars/shiny-developer-conference/ -->"],
["getting-started.html", "Chapter 3 Getting started", " Chapter 3 Getting started In this section we’ll walk through the steps of building a simple shiny application. "],
["structure-of-a-shiny-app.html", "3.1 Structure of a Shiny App", " 3.1 Structure of a Shiny App A simple shiny app is a directory containing two R scripts, one is ui.R, which controls the layout and appearance of your app, the other is server.R, which contains the instructions that your computer needs to build your app. Note that the names for the scripts are fixed, you should NOT use other names. Exercise 1: App template Let’s create a new directory named 01-hello (or whatever you like) and then create two empty ui.R and server.R files within it. Open ui.R with any editor you want and put the following code in it: library(shiny) fluidPage() Then copy the following code to server.R. Note that the server.R contains one single unnamed function. library(shiny) function(input, output) { } For historical reasons, usually shinyUI and shinyServer functions are used to wrap the UI and server side scripts, but it is no longer required as of Shiny 0.10. To run the app, you can switch the R working directory to the directory above 01-hello and run library(shiny) runApp(&#39;01-hello&#39;) or you can switch the R working directory to 01-hello and run library(shiny) runApp() just click the Run App button if you use Rstudio (Recommended) After running the app, you’ll get an empty web page. Single-file Shiny App As the name implied, a single-file shiny app consists of a single file called app.R which contains both the server and UI components. As an example, we can rewrite Exercise 1 into a single-file shiny app with the following code in the app.R file: library(shiny) ui &lt;- fluidPage() server &lt;- function(input, output){} shinyApp(ui = ui, server = server) "],
["ui.html", "3.2 UI", " 3.2 UI UI is de facto an HTML file. In building ui.R file, what we really do is to construct an HTML file with R functions. To see so by typing fluidPage() in the R console and you’ll see this function returns an HTML div tag &lt;div class=&quot;container-fluid&quot;&gt;&lt;/div&gt;. So of course you can build your entire UI with HTML. By default, Shiny uses bootstrap(has nothing to do with bootstrap method in statistics), the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web. 3.2.1 HTML tags shiny::tags is a list of 110 functions. Each function builds a specific HTML tag. If you are familiar with HTML, you will recognize these tags by their names. You can build UI by using HTML tags. Use names(tags) to see all available tags. For more information please look at Customize your UI with HTML. Exercise 2: adding HTML tags Modify ui.R in 01-hello folder as follows and run the App again: library(shiny) fluidPage( tags$div( h1(&quot;Hello Shiny!&quot;), hr(), p(strong(&quot;bold font &quot;), em(&quot;italic font&quot;)), p(code(&quot;code block&quot;)), a(href=&quot;http://www.google.com&quot;, &quot;link to Google&quot;), HTML(&#39;&lt;p&gt; &lt;label&gt;A numeric input:&lt;/label&gt;&lt;br /&gt; &lt;input type=&quot;number&quot; name=&quot;n&quot; value=&quot;7&quot; min=&quot;1&quot; max=&quot;30&quot; /&gt; &lt;/p&gt;&#39;) ) ) Note that most commonly used tags (like h1, p, a, etc in example above) have wrapper functions, so you do not need to prefix their names with tags$. 3.2.2 Layout Shiny implemented the layout features availabe in Bootstrap. You can speed up your development by choosing appropriate layout style. Panels Panel functions are used to put a group of elements together into a single ‘panel’. There are several panel functions defined in shiny: absolutePanel() conditionalPanel() fixedPanel() headerPanel() inputPanel() mainPanel() navlistPanel() sidebarPanel() tabPanel() tabsetPanel() titlePanel() wellPanel() Most of the panel functions return div tags with some class attributes defined in Bootstrap. For example, if you type wellPanel in the R console, you’ll get &lt;div class=&quot;well&quot;&gt;&lt;/div&gt;, which is the well class in Bootstrap. Layouts Layout functions are used to organize panels and elements into an existing layout. There are several layout functions defined in shiny: fluidRow(), column(): based on the bootstrap [grid system] (http://v4-alpha.getbootstrap.com/layout/grid/). See ?fluidRow for more details. flowLayout(): Lays out elements in a left-to-right, top-to-bottom arrangement. sidebarLayout(): Create a layout with a sidebar and main area. (Most commonly used layout.) splitLayout(): Lays out elements horizontally, dividing the available horizontal space into equal parts (by default). verticalLayout(): Create a container that includes one or more rows of content. Figure 3.2.2 gives a graphical demenstration. Figure 3.1: Shiny UI layouts For more details please look at Application layout guide sidebarLayout is perhaps the most useful layout. We’ll take it as example here to show the usage of UI layout functions. See the help document of the sidebarLayout function for detail: ?sidebarLayout Exercise 3: sidebarLayout Modify ui.R in 01-hello folder as follows and run the App again: library(shiny) fluidPage( titlePanel(&quot;Hello Shiny!&quot;), sidebarLayout( sidebarPanel(HTML(&#39;&lt;p&gt; &lt;label&gt;A numeric input:&lt;/label&gt;&lt;br /&gt; &lt;input type=&quot;number&quot; name=&quot;n&quot; value=&quot;7&quot; min=&quot;1&quot; max=&quot;30&quot; /&gt; &lt;/p&gt;&#39;)), mainPanel( p(strong(&quot;bold font &quot;), em(&quot;italic font&quot;)), p(code(&quot;code block&quot;)), a(href=&quot;http://www.google.com&quot;, &quot;link to Google&quot;)) ) ) 3.2.3 Inputs (control widgets) Wigets are web elements that users can interact with. Widgets provide a way for your users to send messages to the Shiny app. Shiny widgets collect values from the user. When a user changes the widget, the value will change as well. In Exercise 3, we used HTML code to add a numeric input (a kind of ‘widget’) to the sidebar panel, but over using HTML code will make the code quite messy and hard to manage for large projects. Shiny comes with a family of pre-built widgets, each created with a transparently named R function, which makes the widgets easier to create and look better(using bootstrap style). The standard Shiny widgets are: function widget actionButton Action Button checkboxGroupInput A group of check boxes checkboxInput A single check box dateInput A calendar to aid date selection dateRangeInput A pair of calendars for selecting a date range fileInput A file upload control wizard helpText Help text that can be added to an input form numericInput A field to enter numbers radioButtons A set of radio buttons selectInput A box with choices to select from sliderInput A slider bar submitButton A submit button textInput A field to enter text Figure ?? gives a graphical demenstration. Figure 3.2: Control Widgets. See examples of widgets: http://shiny.rstudio.com/gallery/widget-gallery.html Adding widgets Each widget function requires several arguments. The first two arguments for each widget are A Name for the widget. The user will not see this name, but you can use it to access the widget’s value. The name should be a character string. A label. This label will appear with the widget in your app. It should be a character string, but it can be an empty string “”. The remaining arguments vary from widget to widget, depending on what the widget needs to do its job. Now let’s improve our example by using numericInput instead of HTML code. Exercise 4: widgets Modify ui.R in 01-hello folder as follows and run the App again: library(shiny) fluidPage( titlePanel(&quot;Hello Shiny!&quot;), sidebarLayout( sidebarPanel( numericInput(&quot;numInput&quot;, &quot;A numeric input:&quot;, value = 7, min = 1, max = 30) ), mainPanel( p(strong(&quot;bold font &quot;), em(&quot;italic font&quot;)), p(code(&quot;code block&quot;)), a(href=&quot;http://www.google.com&quot;, &quot;link to Google&quot;)) ) ) "],
["server.html", "3.3 Server", " 3.3 Server 3.3.1 Output Now we want to build our output, which will be updated automatically when an input widget changes. For example, we want to build an app with a numeric input in the sidebar panel controls the ‘radius’ of a circle, and a text output in the main panel showing the area of the circle based on the radius input. We want the text output can be updated automatically when the radius value changes. Two steps to do that: Register your output object in ui.R. That is tell UI where to put the text output (outlook). Tell Shiny how to render the output in server.R. That is tell the server how to render the text (logic). Exercise 5: output Modify ui.R in 01-hello folder as follows. It is saying that I want to put a text output object in the main panel. library(shiny) fluidPage( titlePanel(&quot;Hello Shiny!&quot;), sidebarLayout( sidebarPanel( numericInput(&quot;numInput&quot;, &quot;A numeric input:&quot;, value = 7, min = 1, max = 30) ), mainPanel( textOutput(&quot;txtOutput&quot;) ) ) ) Modify server.R in 01-hello folder as follows. It gives the instruction of how to calcuate the area of a circle and what text to print. library(shiny) function(input, output) { output$txtOutput = renderText({ paste0(&quot;The area of the circle is: &quot;, pi*input$numInput^2) }) } Now let’s run the app in showcase mode by calling runApp(display.mode = &quot;showcase&quot;). Show case mode will show application code and metadata from a DESCRIPTION file in the application directory alongside the application. Shiny showcase will highlight lines of code in server.R as it runs them. The highlight will appear in yellow and fade out after a few moments. This helps reveal how Shiny creates reactivity; when your user manipulates an app, Shiny reruns parts of server.R to create updated output. The unnamed function in server.R plays a special role in the Shiny process. The function has two arguments, input and output, both of them are list-like objects. The input stores the current values of all of the widgets in your app. These values will be saved under the names same as the inputId of the widgets in ui.R. The output contains all of the code needed to update the R objects in your app. Shiny will automatically make an object reactive if the object uses an input value. In the example above, we used textOutput to register a text output object in ui.R and then used renderText function to render it. There are many other pairs of *Output and render* functions defined in Shiny and they work together to add R output to the UI. Output function render function creates htmlOutput/uiOutput renderUI a Shiny tag object or HTML imageOutput renderImage images (saved as a link to a source file) plotOutput renderPlot plots tableOutput renderTable data frame, matrix, other table like structures textOutput renderText character strings verbatimTextOutput renderPrint any printed output Figure 3.3.1 gives a graphical demenstration. Figure 3.3: Shiny render* and *Output functions 3.3.2 Summary practice Exercise 6: A summary of what we have learned Create a shiny app named ‘02-cars’ with the following requirements: 1. Layout: sidebar layout. 2. A slider in the sidebar panel with inputId “nrows” and label “Number of rows:”, which controls how many rows of the data set datasets::cars to use in the following analysis. The minimum value is 1, maximum value is 50 and default value is 10. 3. In the main panel, create a scatterplot with x axis speed and y axis dist on the top and a table showing the data on the bottom, using outputId “carsPlot” and “carsTable” respectively. Solution will be given in next section. Some people get confused about when to use , and when should not use. Actually it is quite easy to remember: when your component is as an argument to a function, you should use ,, otherwise don’t use comma. For example, you put several components inside a fluidRow, then you should separate the components by using comma; you put some expression inside function(input, output){} in the server.R file, then you don’t need comma to seperate them as they are in the body of a function. -->"],
["reactive-programming.html", "Chapter 4 Reactive Programming", " Chapter 4 Reactive Programming Before entering the topic of this chapter, let’s have a look at the solution to Exercise 6. The ui.R: library(shiny) shinyUI(fluidPage( sidebarLayout( sidebarPanel( sliderInput(&quot;nrows&quot;, &quot;Number of rows:&quot;, min = 1, max = 50, value = 10) ), mainPanel( plotOutput(&quot;carsPlot&quot;), tableOutput(&quot;carsTable&quot;) ) ) )) The server.R: library(shiny) shinyServer(function(input, output) { output$carsPlot &lt;- renderPlot({ plot(head(cars, input$nrows)) }) output$carsTable &lt;- renderTable({ head(cars, input$nrows) }) }) The solution given above works, but not perfect. A better solution would be: shinyServer(function(input, output) { df &lt;- reactive({ head(cars, input$nrows) }) output$plot &lt;- renderPlot({ plot(df()) }) output$table &lt;- renderTable({ df() }) }) "],
["extension.html", "Chapter 5 Extension", " Chapter 5 Extension "],
["references.html", "Chapter 6 References", " Chapter 6 References "]
]
